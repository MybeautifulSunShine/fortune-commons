<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.fortune</groupId>
    <artifactId>fortune-commons</artifactId>
    <version>1.0.2</version>
    <packaging>pom</packaging>
    <name>fortune-commons</name>
    <description>整合各种常见的公共组件</description>

    <modules>
        <module>commons-datacache</module>
        <module>commons-core</module>
        <module>commons-nosql</module>
        <module>commons-export</module>
        <module>commons-web</module>
        <module>commons-web-springmvc</module>
        <module>fortune-commons-example</module>
        <module>commons-doc-client</module>
        <module>commons-doc-server</module>
        <module>commons-doc-common</module>
    </modules>

    <properties>
        <fortune.commons.datacache.version>1.0.2</fortune.commons.datacache.version>
        <fortune.commons.core.version>1.0.2</fortune.commons.core.version>
        <fortune.commons.nosql.version>1.0.2</fortune.commons.nosql.version>
        <fortune.commons.export.version>1.0.2</fortune.commons.export.version>
        <fortune.commons.web.version>1.0.2</fortune.commons.web.version>
        <fortune.commons.web.springmvc.version>1.0.2</fortune.commons.web.springmvc.version>
        <!-- 文件服务公共模块 -->
        <fortune.commons.doc.common.version>1.0.2</fortune.commons.doc.common.version>
        <!-- 文件服务客户端 -->
        <fortune.commons.doc.client.version>1.0.2</fortune.commons.doc.client.version>
        <!-- 文件服务服务端 -->
        <fortune.commons.doc.server.version>1.0.2</fortune.commons.doc.server.version>
        <!--system-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!--Provided version-->
        <servlet.api.version>3.1.0</servlet.api.version>

        <commons.collections4.version>4.1</commons.collections4.version>
        <commons.lang3.version>3.3.1</commons.lang3.version>
        <commons.beanutils.version>1.9.2</commons.beanutils.version>
        <commons.configuration2.version>2.4</commons.configuration2.version>
        <commons.io.version>2.4</commons.io.version>
        <!--Spring -->
        <!--<spring.version>4.2.3.RELEASE</spring.version>-->
        <spring.version>5.1.5.RELEASE</spring.version>
        <aspectj.version>1.8.7</aspectj.version>

        <!-- yaml -->
        <yaml.version>1.18</yaml.version>
        <!-- log4j -->
        <slf4j.version>1.7.5</slf4j.version>
        <log4j.version>1.2.17</log4j.version>
        <logback.version>1.2.3</logback.version>
        <!--Jackson-->
        <jackson.version>2.9.8</jackson.version>
        <!--freemarker-->
        <freemarker.version>2.3.28</freemarker.version>
        <!--cglib-->
        <cglib.version>3.2.10</cglib.version>
        <!--test-->
        <junit.version>4.12</junit.version>
    </properties>

    <dependencies>
        <!-- slf4j start -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- slf4j 实现之一：logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- slf4j 实现之二：slf4j-simple -->
        <!--<dependency>-->
        <!--<groupId>org.slf4j</groupId>-->
        <!--<artifactId>slf4j-simple</artifactId>-->
        <!--<version>${slf4j.version}</version>-->
        <!--</dependency>-->
        <!--slf4j 实现之三：slf4j-log4j12-->
        <!--<dependency>-->
        <!--<groupId>log4j</groupId>-->
        <!--<artifactId>log4j</artifactId>-->
        <!--<version>${log4j.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>org.slf4j</groupId>-->
        <!--<artifactId>slf4j-log4j12</artifactId>-->
        <!--<version>${slf4j.version}</version>-->
        <!--</dependency>-->

        <!-- slf4j end -->

        <!-- javax-servlet -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet.api.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- apache commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons.collections4.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>commons-collections</groupId>-->
            <!--<artifactId>commons-collections</artifactId>-->
            <!--<version>3.2.1</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>${commons.beanutils.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-configuration2</artifactId>
            <version>${commons.configuration2.version}</version>
        </dependency>

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>
        <!-- aspectj -->
        <!--Spring-aspects 实现类似 aspectj 注解方式的时候，借用了 aspectjweaver.jar 中定义的一些annotation 和 class，然而其并不使用 Aspectj 的字节码织入功能。-->
        <!--Spring AOP使用JDK Proxy或者cglib实现代理类生成。对于有实现接口的类使用JDK Proxy，对于无接口的则是用cglib.通过-->
        <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
        <!--指定proxy-target-class为true可强制使用cglib.-->
        <!--aspectjtools.jar包主要是提供赫赫有名的ajc编译器，可以在编译期将将java文件或者class文件或者aspect文件定义的切面织入到业务代码中。
        通常这个东西会被封装进各种IDE插件或者自动化插件中。
        -->
        <!-- aspectjrt.jar包主要是提供运行时的一些注解，静态方法等等东西，通常我们要使用aspectJ的时候都要使用这个包。 -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <!-- aspectjweaverjar包主要是提供了一个java agent用于在类加载期间织入切面(Load time weaving)。
        并且提供了对切面语法的相关处理等基础方法，供ajc使用或者供第三方开发使用。这个包一般我们不需要显式引用，除非需要使用LTW。
         -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
        </dependency>

        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
            <version>${yaml.version}</version>
        </dependency>

        <!--SpringJUnit4ClassRunner requires JUnit 4.12 or higher.-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!--spring单元测试依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>fortune-commons</finalName>
        <plugins>
            <!-- 一个好习惯，就是在此配置JDK的版本，这样就可以方便代码迁移 By Landy 2019.01.04-->
            <!--一般而言，target与source是保持一致的。但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 。-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>1.8</source> <!-- 源代码使用的开发版本 -->
                    <target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
                    <!-- 这下面的是可选项 -->
                    <meminitial>128m</meminitial>
                    <maxmem>512m</maxmem>
                    <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
                    <compilerVersion>1.8</compilerVersion>
                    <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
                    <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
